"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const interface_1 = require("../../../../common/interface");
const common_1 = require("../../../../utils/common");
const reactUtils_1 = require("../../../../utils/reactUtils");
const parseFontSize = (height) => {
    if (height < 10) {
        return 7;
    }
    else if (height < 15) {
        return 9;
    }
    else if (height < 20) {
        return 11;
    }
    else {
        return 13;
    }
};
const EventSummary = (props) => {
    var _a;
    const { isDark, summary, type, viewType, isDarkColor, event, height } = props;
    const eventType = type || interface_1.CALENDAR_EVENT_TYPE.EVENT;
    const style = {
        color: ((_a = event.style) === null || _a === void 0 ? void 0 : _a.color) ? event.style.color : 'inherit',
    };
    if (height) {
        style.fontSize = parseFontSize(height);
        // adjust for smaller event container
        if (height <= 20) {
            style.paddingTop = 0;
            style.lineHeight = 'normal';
            style.height = '100%';
            style.padding = '0px 0px 6px 4px !important';
        }
    }
    return (0, reactUtils_1.parseEventString)(summary, ` Kalend__text ${(0, common_1.parseCssDark)('Kalend__Event__summary', isDark)} ${(0, common_1.parseCssDark)(`Kalend__Event__summary__type-${viewType}`, isDark)} ${isDarkColor ? 'Kalend__text-light' : 'Kalend__text-dark'}`, style, eventType, isDarkColor || false, event.isTaskChecked);
};
exports.default = EventSummary;
