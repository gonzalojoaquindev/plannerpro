"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseToDateTime = exports.DatetimeParser = void 0;
const luxon_1 = require("luxon");
const datez_1 = __importDefault(require("datez"));
//
// Support for local datetime, timezones and floating times
//
const FLOATING_DATETIME = 'floating'; // fixed datetime without timezone
const UTC_TIMEZONE = 'UTC';
/**
 * Parse datetime according different rules like local datetime, floating time and timezones
 * @param date
 * @param zone
 * @param deviceTimezone
 * @constructor
 */
const DatetimeParser = (date, zone, deviceTimezone) => {
    const dateString = typeof date === 'string' ? date : date.toString();
    const isFloatingDatetime = zone === FLOATING_DATETIME;
    // Adjust date with timezone so when converted to UTC it represents correct value with fixed time
    if (isFloatingDatetime) {
        const dateFloating = luxon_1.DateTime.fromISO(dateString, {
            zone: UTC_TIMEZONE,
        });
        return dateFloating.toUTC().toISO();
    }
    const thisDate = luxon_1.DateTime.fromISO(dateString);
    // Adjust datetime to device timezone
    if (deviceTimezone) {
        const dateConvert = datez_1.default.setZone(thisDate, zone);
        return dateConvert.setZone(deviceTimezone).toString();
    }
    return datez_1.default.setZone(thisDate, zone).toString();
};
exports.DatetimeParser = DatetimeParser;
const parseToDateTime = (date, zone, deviceTimezone) => {
    const dateString = typeof date === 'string' ? date : date.toString();
    const isFloatingDatetime = zone === FLOATING_DATETIME;
    // Adjust date with timezone so when converted to UTC it represents correct value with fixed time
    if (isFloatingDatetime) {
        const dateFloating = luxon_1.DateTime.fromISO(dateString, {
            zone: UTC_TIMEZONE,
        });
        return dateFloating.toUTC();
    }
    const thisDate = luxon_1.DateTime.fromISO(dateString);
    if (!zone) {
        // Adjust datetime to device timezone
        if (deviceTimezone) {
            return thisDate.setZone(deviceTimezone);
        }
        else {
            return thisDate;
        }
    }
    return datez_1.default.setZone(thisDate, zone);
};
exports.parseToDateTime = parseToDateTime;
