"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var luxon_1 = require("luxon");
var timezone_soft_1 = __importDefault(require("timezone-soft"));
var getCorrectTimezone = function (timezone) {
    switch (timezone) {
        case 'Central Europe Standard Time':
            return 'Central European Standard Time';
        case 'Central Europe Time':
            return 'Central European Time';
        default:
            return timezone;
    }
};
var getSoftTimezone = function (timezone) {
    var _a;
    var result = (0, timezone_soft_1.default)(getCorrectTimezone(timezone));
    return (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a.iana;
};
var Datez = /** @class */ (function () {
    function Datez() {
    }
    Datez.fromFormat = function (baseDate, format, data) {
        var zone = data.zone;
        var date = luxon_1.DateTime.fromFormat(baseDate, format, {
            zone: zone,
        });
        if (date.invalidReason === 'unsupported zone') {
            var softedTimezone = getSoftTimezone(zone);
            if (!softedTimezone) {
                return date;
            }
            return luxon_1.DateTime.fromFormat(baseDate, format, {
                zone: softedTimezone,
            });
        }
        return date;
    };
    Datez.fromDate = function (baseDate, data) {
        var zone = data.zone;
        var date = luxon_1.DateTime.fromJSDate(baseDate, {
            zone: zone,
        });
        if (date.invalidReason === 'unsupported zone') {
            var softedTimezone = getSoftTimezone(zone);
            if (!softedTimezone) {
                return date;
            }
            return luxon_1.DateTime.fromJSDate(baseDate, {
                zone: softedTimezone,
            });
        }
        return date;
    };
    Datez.fromISO = function (baseDate, data) {
        var zone = data.zone;
        var date = luxon_1.DateTime.fromISO(baseDate, {
            zone: zone,
        });
        if (date.invalidReason === 'unsupported zone') {
            var softedTimezone = getSoftTimezone(zone);
            if (!softedTimezone) {
                return date;
            }
            return luxon_1.DateTime.fromISO(baseDate, {
                zone: softedTimezone,
            });
        }
        return date;
    };
    Datez.setZone = function (date, zone) {
        var result = date.setZone(zone);
        if (result.invalidReason === 'unsupported zone') {
            var softedTimezone = getSoftTimezone(zone);
            if (!softedTimezone) {
                return date;
            }
            return date.setZone(softedTimezone);
        }
        return result;
    };
    return Datez;
}());
exports.default = Datez;
